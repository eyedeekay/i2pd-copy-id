-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

# i2pd-copy-id

Like ssh-copy-id, but for managing destination whitelists in i2pd tunnels.conf
files. Hopefully it can use the real tunnels.conf.d, but there may be some
benefits to using it with samcatd instead since one may want to limit it's
access to a specific set of tunnel config files.

## Why?

Why do I write sections that say "Why?" Because hopefully it's useful. All is
vanity. I find configuring tunnel whitelists both incredibly useful and
incredibly tedious.

## What?

Right now, a glorified echobot that spits out a bunch of extraneous files.
Eventually, two components, in one binary capable of being both the client and
the server.

### Server

The server sets itself up with an encrypted leaseset and a client whitelist,
then generates a configuration file which can be distributed to a client. Then
it forwards it's interface port to the newly created tunnel, where it listens
for a client. When a client requests it over this tunnel, the server can alter
the following i2cp options on the client's behalf:

        [C] - i2cp.accessList                                      null       Comma- or space-separated list of Base64 peer Hashes used for either access list or blacklist. As of release 0.7.13.
            * Actions: (add) or (remove) members. On the "control" tunnel, only the add option is available.
        [C] - i2cp.enableAccessList                                false      Use the access list as a whitelist for incoming connections. As of release 0.7.13.
            * Actions: (enable) or (disable), enable will switch i2cp.enableBlacklist to false
        [C] - i2cp.enableBlackList                                 false      Use the access list as a blacklist for incoming connections. As of release 0.7.13.
            * Actions: (enable) or (disable), enable will switch i2cp.enableAccessList to false

on *any file it has write permission to access*. It can, however, only set those
specific options. It will also generate a set of client keys that you can give
a device.

**The configuration file/keys generated by the server for the clients should**
**be considered highly sensitive. It is not required for the operation of the**
**server, and once transferred to a client, should be backed up in a safe**
**place and removed from the server.**

### Client

The client reads the configuration file generated by the server in order to
establish a tunnel. Then the client communicates with the server's interface
port over i2p, where it **has the power to add and remove whitelist members**
and **enable and disable blacklists and whitelists**.
-----BEGIN PGP SIGNATURE-----

iQEzBAEBCAAdFiEEcNIGBzi++AUjrK/311wDs5teFOEFAlwAvl4ACgkQ11wDs5te
FOFxwggAoIOmVQZc2XPVB5F2PFkSElkQjPDk9QoA9Js5Coikl17/XerHZsEezZjt
woId7ei56/D0SmWioRxVDFl4Jqmxo4MES9mQgD64dBHm6Nmc+vViSQtcni7lxdxQ
i/VM+SYi2qg48tYdxXtDz90ozg+r08pxTMURWNSsZJJSq5ubQ6reFTuBG6/GMiVA
mQLToliDkRoMqCCzw2nAFQa3kf1CbXi9wB/H1QzcVzvUlI7pHgsOC98SX7Nc8qKo
fFGA99NJQf3ms/txM896NQY9Iiki/ewIvTHAe7ndWKFfVnmyPwFVKrMJzSIBE+tr
dTV3TlLeTbshm50icwnLqiMp9XhCJQ==
=OmhF
-----END PGP SIGNATURE-----
